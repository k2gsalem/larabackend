name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: saas_central
          MYSQL_USER: saas
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: rootsecret
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1 --password=rootsecret"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.4-alpine
        ports:
          - 6379:6379
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pcntl, bcmath, intl, pdo_mysql
          coverage: none

      - name: Install Composer dependencies
        run: |
          composer install --prefer-dist --no-interaction

      - name: Prepare environment
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan migrate

      - name: Run tests
        env:
          DB_CONNECTION: central
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: saas_central
          DB_USERNAME: saas
          DB_PASSWORD: secret
          TENANT_DB_HOST: 127.0.0.1
          TENANT_DB_PORT: 3306
          TENANT_DB_USERNAME: saas
          TENANT_DB_PASSWORD: secret
          QUEUE_CONNECTION: redis
          CACHE_STORE: redis
          REDIS_HOST: 127.0.0.1
        run: |
          php artisan test

  build-image:
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Trigger ECS deployment
        if: ${{ secrets.AWS_ECS_CLUSTER && secrets.AWS_ECS_SERVICE }}
        run: |
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} --service ${{ secrets.AWS_ECS_SERVICE }} --force-new-deployment
